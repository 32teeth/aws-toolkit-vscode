/*!
 * Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import { Memento } from 'vscode'
import { integer } from 'vscode-languageserver-types'
import { isManualTrigger, Query, SearchSuggestion } from '../models/model'
import { some } from 'lodash'

export const StorageKey = 'SEARCH_HISTORY'

export interface SearchHistoryFilters {
    /**
     * Flag to define are we looking in global search-history or only in worplace
     *
     * @default - Search will be performed on workplace store
     */
    isGlobal: boolean
    /**
     * Flag to define are we looking only for queries which were manually typed by the user,
     * or only for quries whic were generated by plugin itself, or it's not important
     *
     * @default - We won't filter records bases on type of input
     */
    isManualSearch?: boolean
    /**
     * Array of language filters. If user chose some, the results would be filtered
     *
     * @default - We won't filter records bases on languages
     */
    languages: string[]
    /**
     * User text from search bar in search-history part of UI
     *
     * @default - We won't filter records bases on user input in search-history search bar
     */
    text?: string
    /**
     * Allow us to skip n-first results
     *
     * @default - The starting offset will be 0
     */
    resultOffset: integer
    /**
     * Limit of how many results we want to get from store
     *
     * @default - The records count won't be limited
     */
    resultLimit?: integer
}

export interface SearchHistoryRecord {
    query: Query
    suggestions: SearchSuggestion[]
    recordDate: number
}

export class SearchHistoryStore {
    constructor(private readonly globalStore: Memento, private readonly workplaceStore: Memento) {}

    public async addRecord(record: SearchHistoryRecord): Promise<void> {
        await this.addRecordToWorkplaceStore(record)
        await this.addRecordToGlobalStore(record)
    }

    private async addRecordToWorkplaceStore(record: SearchHistoryRecord): Promise<void> {
        const history = await this.getHistoryFromStore(false)
        history.push(record)

        await this.workplaceStore.update(StorageKey, history)
    }

    private async addRecordToGlobalStore(record: SearchHistoryRecord): Promise<void> {
        const history = await this.getHistoryFromStore(true)
        history.push(record)

        await this.globalStore.update(StorageKey, history)
    }

    public async getHistory(filters: SearchHistoryFilters): Promise<SearchHistoryRecord[]> {
        return this.filterSearchHistoryRecords(await this.getHistoryFromStore(filters.isGlobal), filters)
    }

    private filterSearchHistoryRecords(
        records: SearchHistoryRecord[],
        filters: SearchHistoryFilters
    ): SearchHistoryRecord[] {
        const languages = new Set<string>(filters.languages)

        const localRecordsCopy = [...records]

        const hasLanguage = languages.has.bind(languages)

        const result = localRecordsCopy
            .reverse()
            .filter(
                record =>
                    record.query.input !== '' ||
                    (record.query.codeQuery?.simpleNames.length ?? 0) > 0 ||
                    (record.query.codeQuery?.fullyQualifiedNames.used.length ?? 0) > 0
            )
            .filter(record => record.recordDate !== undefined)
            .filter(
                record =>
                    filters.isManualSearch === undefined ||
                    filters.isManualSearch === isManualTrigger(record.query.trigger)
            )
            .filter(
                record =>
                    filters.languages.length === 0 ||
                    some(record.query.queryContext.must.values(), hasLanguage) ||
                    some(record.query.queryContext.should.values(), hasLanguage)
            )
            .filter(record => filters.text === undefined || record.query.input.includes(filters.text))
            .slice(
                filters.resultOffset ?? 0,
                (filters.resultOffset ?? 0) + (filters.resultLimit ?? localRecordsCopy.length)
            )

        return result
    }

    private async getHistoryFromStore(isGlobal: boolean): Promise<SearchHistoryRecord[]> {
        if (isGlobal) {
            return (await this.globalStore.get(StorageKey)) ?? []
        }

        return (await this.workplaceStore.get(StorageKey)) ?? []
    }
}
